Questions from Module 7 & 8
1. You are designing a smart home system. Create an abstract base class SmartDevice with a
pure virtual function operate(). Devices like SmartLight, SmartThermostat, and SmartFan
inherit from SmartDevice and implement operate() differently.
Write a program that demonstrates runtime polymorphism by storing pointers to SmartDevice
and calling operate() on each.
2. Build a polymorphic system for online payments. Create an abstract class PaymentMethod
with a pure virtual function pay(amount). Derive classes CreditCard, PayPal, and UPI, each
implementing the pay() function with unique messages.
Use runtime polymorphism to allow a user to pay using any method selected at runtime.
3. Create a class Time to store hours and minutes. Overload the == and < operators to compare
two Time objects. Write a program to demonstrate comparing two times for equality and
checking which one is earlier.
4.Design a class Counter with an integer data member.
Overload the prefix and postfix ++ operators to increment the counter.
Overload the + operator to add two Counter objects.
Demonstrate both usages in main().
5. Create a class template Matrix<T> that stores a 2x2 matrix.
Overload the + operator to add two matrices of any data type and return the result.
Demonstrate addition of int and float matrices.
6. Create a class BankAccount with balance as a private member.
Overload the + operator to deposit money (i.e., account + 500 should increase balance by 500).
Overload the - operator to withdraw money.
Ensure balance doesn't go negative.
7. Create a class Fraction with numerator and denominator.
Overload the +, -, *, and / operators to perform arithmetic on two fractions.
Reduce the resulting fraction to its simplest form.
8. Create a class Shape with:
A virtual function display()
An overloaded function display(string color)
Derive class Triangle, override display(), and overload display(string color) as well.
Demonstrate how both runtime and compile-time polymorphism can coexist in the same
program.
9. Create a function template add(T1 a, T2 b) that accepts two different types of parameters
and returns their sum.
Test it with combinations like int + float, float + double, etc.
10.Write a program using vector<int> to:
Accept 5 integers from the user
Insert them into the vector
Display the vector elements using an iterator
Sort and display the sorted vector
11.Explain Class Templates with Multiple Type Parameters with example.
12.Explain the concept of generic programming, its purpose, and how it helps write flexible
and reusable code using function templates and class templates.